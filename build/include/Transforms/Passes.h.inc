/* Autogenerated by mlir-tblgen; don't manually edit */
#ifdef GEN_PASS_CLASSES

//===----------------------------------------------------------------------===//
// DeadCodeElimination
//===----------------------------------------------------------------------===//

template <typename DerivedT>
class DeadCodeEliminationBase : public ::mlir::OperationPass<> {
public:
  using Base = DeadCodeEliminationBase;

  DeadCodeEliminationBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  DeadCodeEliminationBase(const DeadCodeEliminationBase &other) : ::mlir::OperationPass<>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("dce");
  }
  ::llvm::StringRef getArgument() const override { return "dce"; }

  ::llvm::StringRef getDescription() const override { return "dead code elimination"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("DeadCodeElimination");
  }
  ::llvm::StringRef getName() const override { return "DeadCodeElimination"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

protected:
};

//===----------------------------------------------------------------------===//
// LowerFormatConversion
//===----------------------------------------------------------------------===//

template <typename DerivedT>
class LowerFormatConversionBase : public ::mlir::OperationPass<> {
public:
  using Base = LowerFormatConversionBase;

  LowerFormatConversionBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  LowerFormatConversionBase(const LowerFormatConversionBase &other) : ::mlir::OperationPass<>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("lower-format-conversion");
  }
  ::llvm::StringRef getArgument() const override { return "lower-format-conversion"; }

  ::llvm::StringRef getDescription() const override { return "Lower operations for format conversion"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("LowerFormatConversion");
  }
  ::llvm::StringRef getName() const override { return "LowerFormatConversion"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  registry.insert<memref::MemRefDialect>();

  registry.insert<scf::SCFDialect>();

  registry.insert<StandardOpsDialect>();

  registry.insert<vector::VectorDialect>();

  registry.insert<linalg::LinalgDialect>();

  }

protected:
};

//===----------------------------------------------------------------------===//
// LowerStruct
//===----------------------------------------------------------------------===//

template <typename DerivedT>
class LowerStructBase : public ::mlir::OperationPass<> {
public:
  using Base = LowerStructBase;

  LowerStructBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  LowerStructBase(const LowerStructBase &other) : ::mlir::OperationPass<>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("lower-struct");
  }
  ::llvm::StringRef getArgument() const override { return "lower-struct"; }

  ::llvm::StringRef getDescription() const override { return "Lower struct conversion"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("LowerStruct");
  }
  ::llvm::StringRef getName() const override { return "LowerStruct"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

protected:
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// DeadCodeElimination Registration
//===----------------------------------------------------------------------===//

inline void registerDeadCodeEliminationPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::sparlay::createDeadCodeEliminationPass();
  });
}

//===----------------------------------------------------------------------===//
// LowerFormatConversion Registration
//===----------------------------------------------------------------------===//

inline void registerLowerFormatConversionPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::sparlay::createLowerFormatConversionPass();
  });
}

//===----------------------------------------------------------------------===//
// LowerStruct Registration
//===----------------------------------------------------------------------===//

inline void registerLowerStructPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::sparlay::createLowerStructPass();
  });
}

//===----------------------------------------------------------------------===//
// Transforms Registration
//===----------------------------------------------------------------------===//

inline void registerTransformsPasses() {
  registerDeadCodeEliminationPass();
  registerLowerFormatConversionPass();
  registerLowerStructPass();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
